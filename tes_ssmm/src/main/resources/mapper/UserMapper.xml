<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tarena.dao.UserMapper">
	<select id="login" parameterType="User" resultType="string">
		select 
			user_id 
		from 
			t_user 
		where 
			user_loginname=#{loginName} and
			user_password=#{password}
	</select>
	<!-- role的ResultMap -->
	<resultMap type="Role" id="roleMap">
		<!-- 注意:从表中外键id,不能跟主表的主键id名字相同 -->
		<id property="id" column="role_id"/>
		<result property="name" column="role_name"/>
	</resultMap>
	<!-- user的ResultMap -->
	<resultMap type="User" id="userMap">
		<id property="id" column="user_id" jdbcType="VARCHAR"/>
		<result property="loginName" column="user_loginname"/>
		<result property="loginType" column="user_logintype"/>
		<result property="nickName" column="user_nickname"/>
		<result property="password" column="user_password"/>
		<result property="type" column="user_type"/>
		<result property="head" column="user_head"/>
		<result property="score" column="user_score"/>
		<result property="isLock" column="user_islock"/>
		<result property="pwdState" column="user_pwdstate"/>
		<result property="regDate" column="user_regdate"/>
		<result property="loginName" column="user_loginname"/>
		<result property="age" column="user_age"/>
		<result property="sex" column="user_sex"/>
		<result property="introduction" column="user_introduction"/>
		<collection property="roles" ofType="Role" javaType="java.util.List"
					resultMap="roleMap"></collection>
	</resultMap>
	<select id="getCount" parameterType="Page" resultType="java.lang.Integer">
		select 
			count(user_id)
		from 
			t_user
		where 
			user_loginname like #{userKeyword} or
			user_nickname like #{userKeyword}
	</select>
	<select id="getCount_roleType" parameterType="Page" resultType="java.lang.Integer">
		select 
			count(u.user_id)
		from 
			(select * from t_role where role_name like #{roleType}) r
			left outer join t_user_role ur on r.role_id=ur.rid
			left outer join (
								select * from t_user
								where 
									user_loginname like #{userKeyword} or
									user_nickname like #{userKeyword}
							) u on u.user_id=ur.uid
	</select>
	<select id="getUsers" parameterType="Page" resultMap="userMap">
		select 	
				u.user_id,
			   	u.user_loginname,
				u.user_logintype,
				u.user_nickname,
				u.user_password,
				u.user_type,
				u.user_head,
				u.user_score,
				u.user_islock,
				u.user_pwdstate,
				u.user_regdate,
				u.user_age,
				u.user_sex,
				u.user_introduction, 
				r.role_id,
				r.role_name
		from 
			(
				select 
					*
				from
					t_user
				where
					user_loginname like #{userKeyword} or
					user_nickname like #{userKeyword}
				limit 
					#{begin},#{pageSize}
			) u
		left outer join t_user_role ur on u.user_id=ur.uid
		left outer join t_role r on ur.rid=r.role_id
	</select>
	<select id="getUsers_roleType" parameterType="Page" resultMap="userMap">
		select 
			u.user_id,
			u.user_loginname,
			u.user_logintype,
			u.user_nickname,
			u.user_password,
			u.user_type,
			u.user_head,
			u.user_score,
			u.user_islock,
			u.user_pwdstate,
			u.user_regdate,
			u.user_age,
			u.user_sex,
			u.user_introduction, 
			r.role_id,
			r.role_name
		from 
			(select * from t_role where role_name like #{roleType}) r
			left outer join t_user_role ur on r.role_id=ur.rid
			left outer join (
								select * from t_user
								where 
									user_loginname like #{userKeyword} or
									user_nickname like #{userKeyword}
							) u on u.user_id=ur.uid
		limit #{begin},#{pageSize}	
	</select>
	<delete id="deleteUser" parameterType="string">
		delete from t_user where user_id=#{userId}
	</delete>
	<delete id="deleteUserRole" parameterType="string">
		delete from t_user_role where uid=#{userId}
	</delete>
	<select id="getRoleName" resultType="Role">
		select role_id id,role_name name from t_role
	</select>
	<insert id="addUser" parameterType="User">
		insert into t_user
		(
				user_id,
				user_loginname,
				user_logintype,
				user_password,
				user_nickname,
				user_age,
				user_sex,
				user_head
		) values
		(
				#{id},
				#{loginName},
				#{loginType},
				#{password},
				#{nickName},
				#{age},
				#{sex},
				#{head}
		)
	</insert>
	<!-- 删除指定用户id的视频和缓冲表 -->
	<delete id="deleteHistoryCacheByUserId" parameterType="string">
		delete from t_history_cache_collection_purchased where user_id=#{userId}
	</delete>
	<select id="getRoleIdByRoleName" resultType="string" parameterType="string">
		select role_id id from t_role where role_name=#{roleName}
	</select>
	<insert id="addUserRole" parameterType="UserRole">
		insert into t_user_role(uid,rid) values(#{userId},#{roleId})
	</insert>
	<update id="updateUser" parameterType="User">
		update 
			t_user
		set
			user_loginname=#{loginName},
			user_password=#{password},
			user_nickname=#{nickName},
			user_age=#{age},
			user_sex=#{sex},
			user_head=#{head} 
		where
			user_id=#{id}
	</update>
	<select id="findAllUsers" resultMap="userMap">
		select 	
				u.user_id,
			   	u.user_loginname,
				u.user_logintype,
				u.user_nickname,
				u.user_password,
				u.user_type,
				u.user_head,
				u.user_score,
				u.user_islock,
				u.user_pwdstate,
				u.user_regdate,
				u.user_age,
				u.user_sex,
				u.user_introduction, 
				r.role_id,
				r.role_name
		from t_user u
		left outer join t_user_role ur on u.user_id=ur.uid
		left outer join t_role r on ur.rid=r.role_id
	</select>
	<!-- 查询指定角色的用户数 -->
	<select id="findUserCountByRoleName" resultType="java.lang.Integer" parameterType="java.lang.String">
		select 
			count(u.user_id) as geShu
        from t_user u
			left outer join t_user_role ur on u.user_id=ur.uid
	        left outer join t_role r on ur.rid=r.role_id
	    where r.role_name=#{roleName}
	</select>
	<!-- 修改密码 -->
	<update id="editPassword" parameterType="User">
	update
		t_user
	set 
		user_password=#{password,jdbcType=VARCHAR}
	where
		user_loginname=#{loginName,jdbcType=VARCHAR}
	</update>
</mapper>